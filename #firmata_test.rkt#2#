#lang racket

(require sql db)
(require sqlite-table)
(require racket/async-channel)

(require "firmata.rkt")

(require racket/gui/base)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define frame (new frame%
                   [label "Example"]
                   [width 300]
                   [height 300]
                   ))

(send frame show #t)

(define msg (new message% [parent frame]
                          [label "No events so far..."]
                          [stretchable-width 100]))

(define curr-readings (new vertical-panel%
             [parent frame]
             ))


(define curr-time-panel (new horizontal-panel%
                             [parent curr-readings]
                             ))
(define curr-moisture-panel (new horizontal-panel%
                                 [parent curr-readings]
                                 )) 
(define curr-exp-time-panel (new horizontal-panel%
                             [parent curr-readings]
                             ))
(new message%
     [parent curr-time-panel]
     [label "Current Cycle Time: "])

(new message%
     [parent curr-moisture-panel]
     [label "Current Soil Moisture: "])
(new message%
     [parent curr-exp-time-panel]
     [label "Expected time untill Water: "])


(define curr-time-msg (new message%
                      [parent curr-time-panel]
                      [label "nothing...."]))
(define curr-moisture-msg (new message%
                      [parent curr-moisture-panel]
                      [label "nothing...."]))
(define curr-exp-time-msg (new message%
                      [parent curr-exp-time-panel]
                      [label "nothing...."]))


(define avg-readings (new vertical-panel%
             [parent frame]
             ))

(define avg-temp-panel (new horizontal-panel%
                       [parent avg-readings]
                       [alignment '(left top)]))


(define avg-time-panel (new horizontal-panel%
                        [parent avg-readings]
                        [alignment '(left top)]))
(new message%
     [parent avg-temp-panel]
     [label "AvgTemp: "])
                     
(new message%
     [parent avg-time-panel]
     [label "CycleTime: "])

(define avg-temp-msg (new message%
                      [parent avg-temp-panel]
                      [label "nothing...."]))

(define avg-time-msg (new message%
                      [parent avg-time-panel]
                      [label "nothing...."]))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; opens up connection to database
;; I use a local one on my pc
(open-firmata "/dev/cu.usbmodem1411")

(define sqlc
  (sqlite3-connect #:database "test2.db" ))

;;for using racket defines in sql entries... use ',' before symbol name

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; DATABASE INITIALIZATION ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(query-exec sqlc 
;            (create-table data_db
;                          #:columns [avg_temp_range integer] [avg_time integer #:not-null] [time_count integer])) ;; range i = [ (i*10) -> ((i+1)*10) ]

;(query-exec sqlc           (insert #:into data_db #:set [avg_temp_range 0] [avg_time 0] [time_count 0]))
;(query-exec sqlc            (insert #:into data_db #:set [avg_temp_range 1] [avg_time 0] [time_count 0]))
;(query-exec sqlc            (insert #:into data_db #:set [avg_temp_range 2] [avg_time 0] [time_count 0]))
;(query-exec sqlc            (insert #:into data_db #:set [avg_temp_range 3] [avg_time 0] [time_count 0]))
;(query-exec sqlc            (insert #:into data_db #:set [avg_temp_range 4] [avg_time 0] [time_count 0]))
;(query-exec sqlc            (insert #:into data_db #:set [avg_temp_range 5] [avg_time 0] [time_count 0]))
;(query-exec sqlc            (insert #:into data_db #:set [avg_temp_range 6] [avg_time 0] [time_count 0]))
;(query-exec sqlc            (insert #:into data_db #:set [avg_temp_range 7] [avg_time 0] [time_count 0]))
;(query-exec sqlc            (insert #:into data_db #:set [avg_temp_range 8] [avg_time 0] [time_count 0]))
;(query-exec sqlc            (insert #:into data_db #:set [avg_temp_range 9] [avg_time 0] [time_count 0]))
;(query-exec sqlc            (insert #:into data_db #:set [avg_temp_range 10] [avg_time 0] [time_count 0]))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;; GLOBAL DEFINITIONS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define OUTPUT 0)
(define INPUT 1)

(define min-moisture-threshold 100)
(define tmp_temp_avg 0)
(define sum_temp_readings_ 0)
(define previous_timestamp_ (current-seconds))
;;(define current_timestamp_ (current-seconds))
(define temp_reading_count_ 0)
(define cycle_tics_ 0) ;; just so can get an idea of average tics -> milliseconds

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;; SETUP THE PINS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(report-analog-pin! 0 1)
(report-analog-pin! 1 1)
(report-analog-pin! 2 1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; DATABASE FUNCTIONS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; resets all columns (avg_tmp_range = [ 0 -> 10 ] ) to [avg_time = 0] [time_count = 0]
(define (reset-db)
  (query-exec sqlc (update data_db #:set [avg_time 0] [time_count 0])))

;;returns time_avg for database column where avg_temp_range = range
(define (get-range-time-avg range)
  (query-value sqlc (select avg_time #:from data_db #:where (= avg_temp_range ,range ))))

;;returns number of times averaged so far for database column where avg_temp_range = range
(define (get-range-time-count range)
  (query-value sqlc (select time_count #:from data_db #:where (= avg_temp_range ,range ))))

;;updates the avg_time between waterings for the avg_temp_range = curr_temp_range 
(define (update-current-db curr_temp_range time_)
  (let ((times_avged   (get-range-time-count curr_temp_range))
        )
    (let (( range_time_total (* times_avged (get-range-time-avg curr_temp_range))) 
          ( times_avged_inc (+ times_avged 1))
          )
      (let (( new_avg (/ (+ range_time_total time_) times_avged_inc)) ;; avg_time[n+1] = ((avg_time[n] * n) + time)  /  (n+1)
            ) 
      (query-exec sqlc
                  (update data_db #:set [avg_time ,new_avg] [time_count ,times_avged_inc] #:where (= avg_temp_range ,curr_temp_range)))
      ))))

;;dumps db entries for avg_temp_range = [0 -> 10]
(define (dump-current-db)
  (query sqlc
       (select avg_temp_range avg_time time_count #:from data_db ))
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (curr-temp-c)
  (/ (* 25 (read-analog-pin 0)) 1024 ))

(define (curr-temp-f)
  (+ (/ (* (curr-temp-c) 9) 5) 32))

(define (curr-soil-moisture)
  (read-analog-pin 1))


;;quick set of avg's for temp
(define (quick-avg-temp y)
    (define (helper x tmp_avg_temp)
      (if (= x 0)
          (/ tmp_avg_temp y)
          (helper ( - x 1) (+ tmp_avg_temp (curr-temp-f))))
      )
    (helper y 0))

;;quick set of avgs for soil moisture
(define (quick-avg-soil y)
  (define (helper x tmp_avg_soil)
    (if (= x 0)
        (/ tmp_avg_soil y)
        (helper ( - x 1) (+ tmp_avg_soil (curr-soil-moisture))))
    )
  (helper y 0))


;; UPDATE global values for a single temp sensor-reading / quick-avg for temp sensor
(define (update-globals)
  (begin
    (set! sum_temp_readings_ (+ sum_temp_readings_ (quick-avg-temp 5))) ;; avg = ((avg * #readings) + new_reading)
    (set! temp_reading_count_ (+ temp_reading_count_ 1))
    (set! cycle_tics_ (+ cycle_tics_ 1))
    (display "GLOBALS:\n")
    (display "sum_temp_readings: ") (display sum_temp_readings_ )
    (display "\ntemp_reading_count: ") (display temp_reading_count_)
    (display "\nwater-soil-moisture-level: ") (display (curr-soil-moisture))
    (display "\nprevious_timestamp: ") (display previous_timestamp_)
    (display "\nElapsed Time: ") (display ( - (current-seconds) previous_timestamp_))
    (display "\ncycle-tics: ") (display cycle_tics_) 
    ))


;(define update-db '())


;;called when water-soil-moisture is below given level
(define (complete-water-cycle)
  (let ((sum_range sum_temp_readings_))
    (cond
      ((> sum_temp_readings_ 0 )
       (begin
         (display "\n Updating database with values \n sum_temp_readings: ") (display sum_temp_readings_) (display "temp_reading_count: ") (display temp_reading_count_) (display "::::::::::::\n\n")
         (update-current-db (round (/ (/ sum_range temp_reading_count_) 10)) (- (current-seconds) previous_timestamp_)) ))
      (else (display "sum_readings 0\n")))))

(define (sensor-loop)
  (cond
    ( ( > cycle_tics_ 50) (display "Completed: " ) (display cycle_tics_) (display " Cycles\n") (set! cycle_tics_ 0) (display "********************\n*******************\n") ) 
    ( ( > min-moisture-threshold (quick-avg-soil 5) ) (set! cycle_tics_ 0) (complete-water-cycle) (update-globals)
                                                      (set-frame-header "cwc") (send-avg-temp) (send-cycle-time)  (set! previous_timestamp_ (current-seconds)) (sleep 10) (sensor-loop) )
    ( else (update-globals)
           (set-frame-header "other") (send-curr-moisture) (send-cycle-time) (send-curr-exp-time) (sleep 10) (sensor-loop) )
    ))


(define (set-frame-header c)
  (cond
    ((equal? c "cwc") (send curr-readings show #f) (send avg-readings show #t) (send msg set-label "Completeted Water Cycle!"))
    ((equal? c "db")  (send msg set-label "Database Values"))
    (else (send curr-readings show #t) (send avg-readings show #f) (send msg set-label "Current Readings..."))
     ))

(define (send-avg-temp)
  (if (equal? sum_temp_readings_ 0)
      ( send avg-temp-msg set-label (number->string sum_temp_readings_) )
      ( send avg-temp-msg set-label (number->string (round (/ sum_temp_readings_ temp_reading_count_))) )
      )
  )
(define (send-curr-moisture)
  ( send curr-moisture-msg set-label (number->string (curr-soil-moisture)) )
      )

(define (send-curr-exp-time)
  (if (equal? sum_temp_readings_ 0)
      (send curr-exp-time-msg set-label (number->string (- (get-range-time-avg 0) (- (current-seconds) previous_timestamp_))))    
      (send curr-exp-time-msg set-label (number->string (- (get-range-time-avg (round (/ (/ sum_temp_readings_ temp_reading_count_) 10))) (- (current-seconds) previous_timestamp_))))
      ))
      
      
(define (send-cycle-time) 
  ( send avg-time-msg set-label (number->string (- (current-seconds) previous_timestamp_)) )
  ( send curr-time-msg set-label (number->string (- (current-seconds) previous_timestamp_)) )
  )

(new button% [parent frame]
             [label "Exit"]
             ; Callback procedure for a button click:
             [callback (lambda (button event)
                         (kill-thread sensor-thread)
                         (exit 1)
                         )
                       ]
             )
;;;;;;;;;;;;;;;; ~~ MAIN ~~ ;;;;;;;;;;;;;;;;;;;;;;;;;;;

(reset-db)


(define sensor-thread
  (thread (lambda ()
            (let loop ()
                    (sensor-loop)
              (loop)))))

;(define db-thread
 ; (thread (lambda ()
   ;         (let loop ()
    ;         (user-request)
     ;           (loop)))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;











  
  
